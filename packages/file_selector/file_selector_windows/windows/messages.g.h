// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_FILE_SELECTOR_WINDOWS_H_
#define PIGEON_MESSAGES_G_FILE_SELECTOR_WINDOWS_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace file_selector_windows {

/* Generated class from Pigeon. */

class FlutterError {
 public:
  FlutterError();
  FlutterError(const std::string& arg_code) : code(arg_code){};
  FlutterError(const std::string& arg_code, const std::string& arg_message)
      : code(arg_code), message(arg_message){};
  FlutterError(const std::string& arg_code, const std::string& arg_message,
               const flutter::EncodableValue& arg_details)
      : code(arg_code), message(arg_message), details(arg_details){};
  std::string code;
  std::string message;
  flutter::EncodableValue details;
};
template <class T>
class ErrorOr {
  std::variant<std::unique_ptr<T>, T, FlutterError> v;

 public:
  ErrorOr(const T& rhs) { new (&v) T(rhs); }
  ErrorOr(const FlutterError& rhs) { new (&v) FlutterError(rhs); }
  static ErrorOr<std::unique_ptr<T>> MakeWithUniquePtr(std::unique_ptr<T> rhs) {
    ErrorOr<std::unique_ptr<T>> ret = ErrorOr<std::unique_ptr<T>>();
    ret.v = std::move(rhs);
    return ret;
  }
  bool hasError() const { return std::holds_alternative<FlutterError>(v); }
  const T& value() const { return std::get<T>(v); };
  const FlutterError& error() const { return std::get<FlutterError>(v); };

 private:
  ErrorOr() = default;
  friend class ErrorOr;
};

/* Generated class from Pigeon that represents data sent in messages. */
class TypeGroup {
 public:
  TypeGroup();
  const std::string& getLabel() const;
  void setLabel(const std::string& setterArg);

  const flutter::EncodableList& getExtensions() const;
  void setExtensions(const flutter::EncodableList& setterArg);

 private:
  TypeGroup(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap();
  friend class FileSelectorApi;
  friend class FileSelectorApiCodecSerializer;
  std::string label_;
  flutter::EncodableList extensions_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class SelectionOptions {
 public:
  SelectionOptions();
  bool getAllowMultiple() const;
  void setAllowMultiple(const bool setterArg);

  bool getSelectFolders() const;
  void setSelectFolders(const bool setterArg);

  const flutter::EncodableList& getAllowedTypes() const;
  void setAllowedTypes(const flutter::EncodableList& setterArg);

 private:
  SelectionOptions(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap();
  friend class FileSelectorApi;
  friend class FileSelectorApiCodecSerializer;
  bool allowMultiple_;
  bool selectFolders_;
  flutter::EncodableList allowedTypes_;
};

class FileSelectorApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  inline static FileSelectorApiCodecSerializer& GetInstance() {
    static FileSelectorApiCodecSerializer sInstance;
    return sInstance;
  }

  FileSelectorApiCodecSerializer();

 public:
  void WriteValue(const flutter::EncodableValue& value,
                  flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
      uint8_t type, flutter::ByteStreamReader* stream) const override;
};

/* Generated class from Pigeon that represents a handler of messages from
 * Flutter. */
class FileSelectorApi {
 public:
  FileSelectorApi(const FileSelectorApi&) = delete;
  FileSelectorApi& operator=(const FileSelectorApi&) = delete;
  virtual ~FileSelectorApi(){};
  virtual ErrorOr<std::unique_ptr<flutter::EncodableList>> showOpenDialog(
      const SelectionOptions& options,
      std::optional<std::string> initialDirectory,
      std::optional<std::string> confirmButtonText) = 0;
  virtual ErrorOr<std::unique_ptr<flutter::EncodableList>> showSaveDialog(
      const SelectionOptions& options,
      std::optional<std::string> initialDirectory,
      std::optional<std::string> suggestedName,
      std::optional<std::string> confirmButtonText) = 0;

  /** The codec used by FileSelectorApi. */
  static const flutter::StandardMessageCodec& GetCodec();
  /** Sets up an instance of `FileSelectorApi` to handle messages through the
   * `binary_messenger`. */
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    FileSelectorApi* api);
  static flutter::EncodableMap WrapError(std::string_view errorMessage);
  static flutter::EncodableMap WrapError(const FlutterError& error);

 protected:
  FileSelectorApi() = default;
};
}  // namespace file_selector_windows
#endif  // PIGEON_MESSAGES_G_FILE_SELECTOR_WINDOWS_H_

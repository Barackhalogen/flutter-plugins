// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace file_selector_windows {

/* Generated class from Pigeon. */

/* TypeGroup */

const std::string& TypeGroup::getLabel() const { return label_; }
void TypeGroup::setLabel(const std::string& setterArg) {
  this->label_ = setterArg;
}

const flutter::EncodableList& TypeGroup::getExtensions() const {
  return extensions_;
}
void TypeGroup::setExtensions(const flutter::EncodableList& setterArg) {
  this->extensions_ = setterArg;
}

flutter::EncodableMap TypeGroup::ToEncodableMap() {
  flutter::EncodableMap toMapResult;
  toMapResult.insert(std::make_pair(flutter::EncodableValue("label"),
                                    flutter::EncodableValue(label_)));
  toMapResult.insert(std::make_pair(flutter::EncodableValue("extensions"),
                                    flutter::EncodableValue(extensions_)));
  return toMapResult;
}
TypeGroup::TypeGroup() {}
TypeGroup::TypeGroup(flutter::EncodableMap map) {
  auto encodable_label = map.at(flutter::EncodableValue("label"));
  if (const std::string* pointer_label =
          std::get_if<std::string>(&encodable_label)) {
    label_ = *pointer_label;
  }
  auto encodable_extensions = map.at(flutter::EncodableValue("extensions"));
  if (const flutter::EncodableList* pointer_extensions =
          std::get_if<flutter::EncodableList>(&encodable_extensions)) {
    extensions_ = *pointer_extensions;
  }
}

/* SelectionOptions */

bool SelectionOptions::getAllowMultiple() const { return allowMultiple_; }
void SelectionOptions::setAllowMultiple(const bool setterArg) {
  this->allowMultiple_ = setterArg;
}

bool SelectionOptions::getSelectFolders() const { return selectFolders_; }
void SelectionOptions::setSelectFolders(const bool setterArg) {
  this->selectFolders_ = setterArg;
}

const flutter::EncodableList& SelectionOptions::getAllowedTypes() const {
  return allowedTypes_;
}
void SelectionOptions::setAllowedTypes(
    const flutter::EncodableList& setterArg) {
  this->allowedTypes_ = setterArg;
}

flutter::EncodableMap SelectionOptions::ToEncodableMap() {
  flutter::EncodableMap toMapResult;
  toMapResult.insert(std::make_pair(flutter::EncodableValue("allowMultiple"),
                                    flutter::EncodableValue(allowMultiple_)));
  toMapResult.insert(std::make_pair(flutter::EncodableValue("selectFolders"),
                                    flutter::EncodableValue(selectFolders_)));
  toMapResult.insert(std::make_pair(flutter::EncodableValue("allowedTypes"),
                                    flutter::EncodableValue(allowedTypes_)));
  return toMapResult;
}
SelectionOptions::SelectionOptions() {}
SelectionOptions::SelectionOptions(flutter::EncodableMap map) {
  auto encodable_allowMultiple =
      map.at(flutter::EncodableValue("allowMultiple"));
  if (const bool* pointer_allowMultiple =
          std::get_if<bool>(&encodable_allowMultiple)) {
    allowMultiple_ = *pointer_allowMultiple;
  }
  auto encodable_selectFolders =
      map.at(flutter::EncodableValue("selectFolders"));
  if (const bool* pointer_selectFolders =
          std::get_if<bool>(&encodable_selectFolders)) {
    selectFolders_ = *pointer_selectFolders;
  }
  auto encodable_allowedTypes = map.at(flutter::EncodableValue("allowedTypes"));
  if (const flutter::EncodableList* pointer_allowedTypes =
          std::get_if<flutter::EncodableList>(&encodable_allowedTypes)) {
    allowedTypes_ = *pointer_allowedTypes;
  }
}

FileSelectorApiCodecSerializer::FileSelectorApiCodecSerializer() {}
flutter::EncodableValue FileSelectorApiCodecSerializer::ReadValueOfType(
    uint8_t type, flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return flutter::CustomEncodableValue(
          SelectionOptions(std::get<flutter::EncodableMap>(ReadValue(stream))));

    case 129:
      return flutter::CustomEncodableValue(
          TypeGroup(std::get<flutter::EncodableMap>(ReadValue(stream))));

    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void FileSelectorApiCodecSerializer::WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const {
  if (const flutter::CustomEncodableValue* custom_value =
          std::get_if<flutter::CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(SelectionOptions)) {
      stream->WriteByte(128);
      WriteValue(
          std::any_cast<SelectionOptions>(*custom_value).ToEncodableMap(),
          stream);
      return;
    }
    if (custom_value->type() == typeid(TypeGroup)) {
      stream->WriteByte(129);
      WriteValue(std::any_cast<TypeGroup>(*custom_value).ToEncodableMap(),
                 stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/** The codec used by FileSelectorApi. */
const flutter::StandardMessageCodec& FileSelectorApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(
      &FileSelectorApiCodecSerializer::GetInstance());
}

/** Sets up an instance of `FileSelectorApi` to handle messages through the
 * `binary_messenger`. */
void FileSelectorApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                            FileSelectorApi* api) {
  {
    auto channel =
        std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
            binary_messenger,
            "dev.flutter.pigeon.FileSelectorApi.showOpenDialog", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const flutter::EncodableValue& message,
                const flutter::MessageReply<flutter::EncodableValue>& reply) {
            flutter::EncodableMap wrapped;
            try {
              auto args = std::get<flutter::EncodableList>(message);
              auto encodable_options_arg = args.at(0);
              if (encodable_options_arg.IsNull()) {
                wrapped.insert(std::make_pair(
                    flutter::EncodableValue("error"),
                    WrapError("options_arg unexpectedly null.")));
                reply(wrapped);
                return;
              }
              const SelectionOptions& options_arg =
                  std::any_cast<const SelectionOptions&>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_options_arg));
              auto encodable_initialDirectory_arg = args.at(1);
              std::optional<std::string> initialDirectory_arg =
                  std::any_cast<std::optional<std::string>>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_initialDirectory_arg));
              auto encodable_confirmButtonText_arg = args.at(2);
              std::optional<std::string> confirmButtonText_arg =
                  std::any_cast<std::optional<std::string>>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_confirmButtonText_arg));
              ErrorOr<std::unique_ptr<flutter::EncodableList>> output =
                  api->showOpenDialog(options_arg, initialDirectory_arg,
                                      confirmButtonText_arg);
              if (output.hasError()) {
                wrapped.insert(std::make_pair(flutter::EncodableValue("error"),
                                              WrapError(output.error())));
              } else {
                if (!output.value()) {
                  wrapped.insert(std::make_pair(
                      flutter::EncodableValue("error"),
                      WrapError("output is unexpectedly null.")));
                } else {
                  wrapped.insert(std::make_pair(
                      flutter::EncodableValue("result"),
                      flutter::CustomEncodableValue(*output.value().get())));
                }
              }
            } catch (const std::exception& exception) {
              wrapped.insert(std::make_pair(flutter::EncodableValue("error"),
                                            WrapError(exception.what())));
            }
            reply(wrapped);
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel =
        std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
            binary_messenger,
            "dev.flutter.pigeon.FileSelectorApi.showSaveDialog", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const flutter::EncodableValue& message,
                const flutter::MessageReply<flutter::EncodableValue>& reply) {
            flutter::EncodableMap wrapped;
            try {
              auto args = std::get<flutter::EncodableList>(message);
              auto encodable_options_arg = args.at(0);
              if (encodable_options_arg.IsNull()) {
                wrapped.insert(std::make_pair(
                    flutter::EncodableValue("error"),
                    WrapError("options_arg unexpectedly null.")));
                reply(wrapped);
                return;
              }
              const SelectionOptions& options_arg =
                  std::any_cast<const SelectionOptions&>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_options_arg));
              auto encodable_initialDirectory_arg = args.at(1);
              std::optional<std::string> initialDirectory_arg =
                  std::any_cast<std::optional<std::string>>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_initialDirectory_arg));
              auto encodable_suggestedName_arg = args.at(2);
              std::optional<std::string> suggestedName_arg =
                  std::any_cast<std::optional<std::string>>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_suggestedName_arg));
              auto encodable_confirmButtonText_arg = args.at(3);
              std::optional<std::string> confirmButtonText_arg =
                  std::any_cast<std::optional<std::string>>(
                      std::get<flutter::CustomEncodableValue>(
                          encodable_confirmButtonText_arg));
              ErrorOr<std::unique_ptr<flutter::EncodableList>> output =
                  api->showSaveDialog(options_arg, initialDirectory_arg,
                                      suggestedName_arg, confirmButtonText_arg);
              if (output.hasError()) {
                wrapped.insert(std::make_pair(flutter::EncodableValue("error"),
                                              WrapError(output.error())));
              } else {
                if (!output.value()) {
                  wrapped.insert(std::make_pair(
                      flutter::EncodableValue("error"),
                      WrapError("output is unexpectedly null.")));
                } else {
                  wrapped.insert(std::make_pair(
                      flutter::EncodableValue("result"),
                      flutter::CustomEncodableValue(*output.value().get())));
                }
              }
            } catch (const std::exception& exception) {
              wrapped.insert(std::make_pair(flutter::EncodableValue("error"),
                                            WrapError(exception.what())));
            }
            reply(wrapped);
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

flutter::EncodableMap FileSelectorApi::WrapError(
    std::string_view errorMessage) {
  return flutter::EncodableMap(
      {{flutter::EncodableValue("message"),
        flutter::EncodableValue(std::string(errorMessage).data())},
       {flutter::EncodableValue("code"), flutter::EncodableValue("Error")},
       {flutter::EncodableValue("details"), flutter::EncodableValue()}});
}
flutter::EncodableMap FileSelectorApi::WrapError(const FlutterError& error) {
  return flutter::EncodableMap(
      {{flutter::EncodableValue("message"),
        flutter::EncodableValue(error.message)},
       {flutter::EncodableValue("code"), flutter::EncodableValue(error.code)},
       {flutter::EncodableValue("details"), error.details}});
}

}  // namespace file_selector_windows

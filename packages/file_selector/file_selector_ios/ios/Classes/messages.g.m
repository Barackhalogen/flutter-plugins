// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v3.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.g.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTFileSelectorConfig ()
+ (FLTFileSelectorConfig *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTFileSelectorConfig
+ (instancetype)makeWithUtis:(nullable NSArray<NSString *> *)utis
    allowMultiSelection:(nullable NSNumber *)allowMultiSelection {
  FLTFileSelectorConfig* pigeonResult = [[FLTFileSelectorConfig alloc] init];
  pigeonResult.utis = utis;
  pigeonResult.allowMultiSelection = allowMultiSelection;
  return pigeonResult;
}
+ (FLTFileSelectorConfig *)fromMap:(NSDictionary *)dict {
  FLTFileSelectorConfig *pigeonResult = [[FLTFileSelectorConfig alloc] init];
  pigeonResult.utis = GetNullableObject(dict, @"utis");
  pigeonResult.allowMultiSelection = GetNullableObject(dict, @"allowMultiSelection");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"utis" : (self.utis ?: [NSNull null]),
    @"allowMultiSelection" : (self.allowMultiSelection ?: [NSNull null]),
  };
}
@end

@interface FLTFileSelectorApiCodecReader : FlutterStandardReader
@end
@implementation FLTFileSelectorApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTFileSelectorConfig fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTFileSelectorApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTFileSelectorApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTFileSelectorConfig class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTFileSelectorApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTFileSelectorApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTFileSelectorApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTFileSelectorApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTFileSelectorApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTFileSelectorApiCodecReaderWriter *readerWriter = [[FLTFileSelectorApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FLTFileSelectorApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTFileSelectorApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FileSelectorApi.openFile"
        binaryMessenger:binaryMessenger
        codec:FLTFileSelectorApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openFileSelectorWithConfig:completion:)], @"FLTFileSelectorApi api (%@) doesn't respond to @selector(openFileSelectorWithConfig:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTFileSelectorConfig *arg_config = GetNullableObjectAtIndex(args, 0);
        [api openFileSelectorWithConfig:arg_config completion:^(NSArray<NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}

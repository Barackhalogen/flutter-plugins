// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.wrapper_example;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class GeneratedExampleLibraryApis {
  private static class BaseObjectHostApiCodec extends StandardMessageCodec {
    public static final BaseObjectHostApiCodec INSTANCE = new BaseObjectHostApiCodec();
    private BaseObjectHostApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BaseObjectHostApi {
    void dispose(@NonNull Long identifier);

    /** The codec used by BaseObjectHostApi. */
    static MessageCodec<Object> getCodec() {
      return BaseObjectHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `BaseObjectHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BaseObjectHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BaseObjectHostApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number identifierArg = (Number)args.get(0);
              if (identifierArg == null) {
                throw new NullPointerException("identifierArg unexpectedly null.");
              }
              api.dispose((identifierArg == null) ? null : identifierArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class BaseObjectFlutterApiCodec extends StandardMessageCodec {
    public static final BaseObjectFlutterApiCodec INSTANCE = new BaseObjectFlutterApiCodec();
    private BaseObjectFlutterApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class BaseObjectFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public BaseObjectFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return BaseObjectFlutterApiCodec.INSTANCE;
    }

    public void dispose(@NonNull Long identifierArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BaseObjectFlutterApi.dispose", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(identifierArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class MyClassHostApiCodec extends StandardMessageCodec {
    public static final MyClassHostApiCodec INSTANCE = new MyClassHostApiCodec();
    private MyClassHostApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MyClassHostApi {
    void create(@NonNull Long identifier, @NonNull String primitiveField, @NonNull Long classFieldIdentifier);
    void myStaticMethod();
    void myMethod(@NonNull Long identifier, @NonNull String primitiveParam, @NonNull Long classParamIdentifier);
    void attachClassField(@NonNull Long identifier, @NonNull Long classFieldIdentifier);

    /** The codec used by MyClassHostApi. */
    static MessageCodec<Object> getCodec() {
      return MyClassHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `MyClassHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MyClassHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyClassHostApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number identifierArg = (Number)args.get(0);
              if (identifierArg == null) {
                throw new NullPointerException("identifierArg unexpectedly null.");
              }
              String primitiveFieldArg = (String)args.get(1);
              if (primitiveFieldArg == null) {
                throw new NullPointerException("primitiveFieldArg unexpectedly null.");
              }
              Number classFieldIdentifierArg = (Number)args.get(2);
              if (classFieldIdentifierArg == null) {
                throw new NullPointerException("classFieldIdentifierArg unexpectedly null.");
              }
              api.create((identifierArg == null) ? null : identifierArg.longValue(), primitiveFieldArg, (classFieldIdentifierArg == null) ? null : classFieldIdentifierArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyClassHostApi.myStaticMethod", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.myStaticMethod();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyClassHostApi.myMethod", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number identifierArg = (Number)args.get(0);
              if (identifierArg == null) {
                throw new NullPointerException("identifierArg unexpectedly null.");
              }
              String primitiveParamArg = (String)args.get(1);
              if (primitiveParamArg == null) {
                throw new NullPointerException("primitiveParamArg unexpectedly null.");
              }
              Number classParamIdentifierArg = (Number)args.get(2);
              if (classParamIdentifierArg == null) {
                throw new NullPointerException("classParamIdentifierArg unexpectedly null.");
              }
              api.myMethod((identifierArg == null) ? null : identifierArg.longValue(), primitiveParamArg, (classParamIdentifierArg == null) ? null : classParamIdentifierArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyClassHostApi.attachClassField", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number identifierArg = (Number)args.get(0);
              if (identifierArg == null) {
                throw new NullPointerException("identifierArg unexpectedly null.");
              }
              Number classFieldIdentifierArg = (Number)args.get(1);
              if (classFieldIdentifierArg == null) {
                throw new NullPointerException("classFieldIdentifierArg unexpectedly null.");
              }
              api.attachClassField((identifierArg == null) ? null : identifierArg.longValue(), (classFieldIdentifierArg == null) ? null : classFieldIdentifierArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class MyClassFlutterApiCodec extends StandardMessageCodec {
    public static final MyClassFlutterApiCodec INSTANCE = new MyClassFlutterApiCodec();
    private MyClassFlutterApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class MyClassFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public MyClassFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return MyClassFlutterApiCodec.INSTANCE;
    }

    public void create(@NonNull Long identifierArg, @NonNull String primitiveFieldArg, @NonNull Long classFieldIdentifierArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyClassFlutterApi.create", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(identifierArg, primitiveFieldArg, classFieldIdentifierArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void myCallbackMethod(@NonNull Long identifierArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyClassFlutterApi.myCallbackMethod", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(identifierArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class MyOtherClassHostApiCodec extends StandardMessageCodec {
    public static final MyOtherClassHostApiCodec INSTANCE = new MyOtherClassHostApiCodec();
    private MyOtherClassHostApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MyOtherClassHostApi {
    void create(@NonNull Long identifier);

    /** The codec used by MyOtherClassHostApi. */
    static MessageCodec<Object> getCodec() {
      return MyOtherClassHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `MyOtherClassHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MyOtherClassHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyOtherClassHostApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number identifierArg = (Number)args.get(0);
              if (identifierArg == null) {
                throw new NullPointerException("identifierArg unexpectedly null.");
              }
              api.create((identifierArg == null) ? null : identifierArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class MyOtherClassFlutterApiCodec extends StandardMessageCodec {
    public static final MyOtherClassFlutterApiCodec INSTANCE = new MyOtherClassFlutterApiCodec();
    private MyOtherClassFlutterApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class MyOtherClassFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public MyOtherClassFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return MyOtherClassFlutterApiCodec.INSTANCE;
    }

    public void create(@NonNull Long identifierArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyOtherClassFlutterApi.create", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(identifierArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class MyClassSubclassHostApiCodec extends StandardMessageCodec {
    public static final MyClassSubclassHostApiCodec INSTANCE = new MyClassSubclassHostApiCodec();
    private MyClassSubclassHostApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MyClassSubclassHostApi {
    void create(@NonNull Long identifier, @NonNull String primitiveField, @NonNull Long classFieldIdentifier);

    /** The codec used by MyClassSubclassHostApi. */
    static MessageCodec<Object> getCodec() {
      return MyClassSubclassHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `MyClassSubclassHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MyClassSubclassHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MyClassSubclassHostApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number identifierArg = (Number)args.get(0);
              if (identifierArg == null) {
                throw new NullPointerException("identifierArg unexpectedly null.");
              }
              String primitiveFieldArg = (String)args.get(1);
              if (primitiveFieldArg == null) {
                throw new NullPointerException("primitiveFieldArg unexpectedly null.");
              }
              Number classFieldIdentifierArg = (Number)args.get(2);
              if (classFieldIdentifierArg == null) {
                throw new NullPointerException("classFieldIdentifierArg unexpectedly null.");
              }
              api.create((identifierArg == null) ? null : identifierArg.longValue(), primitiveFieldArg, (classFieldIdentifierArg == null) ? null : classFieldIdentifierArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}

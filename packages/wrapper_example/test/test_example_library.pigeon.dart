// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v4.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:wrapper_example/src/example_library.pigeon.dart';

class _TestBaseObjectHostApiCodec extends StandardMessageCodec {
  const _TestBaseObjectHostApiCodec();
}
abstract class TestBaseObjectHostApi {
  static const MessageCodec<Object?> codec = _TestBaseObjectHostApiCodec();

  void dispose(int identifier);
  static void setup(TestBaseObjectHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BaseObjectHostApi.dispose', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.BaseObjectHostApi.dispose was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_identifier = (args[0] as int?);
          assert(arg_identifier != null, 'Argument for dev.flutter.pigeon.BaseObjectHostApi.dispose was null, expected non-null int.');
          api.dispose(arg_identifier!);
          return <Object?, Object?>{};
        });
      }
    }
  }
}

class _TestMyClassHostApiCodec extends StandardMessageCodec {
  const _TestMyClassHostApiCodec();
}
abstract class TestMyClassHostApi {
  static const MessageCodec<Object?> codec = _TestMyClassHostApiCodec();

  void create(int identifier, String primitiveField, int classFieldIdentifier);
  void myStaticMethod();
  void myMethod(int identifier, String primitiveParam, int classParamIdentifier);
  void attachClassField(int identifier, int classFieldIdentifier);
  static void setup(TestMyClassHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyClassHostApi.create', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.create was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_identifier = (args[0] as int?);
          assert(arg_identifier != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.create was null, expected non-null int.');
          final String? arg_primitiveField = (args[1] as String?);
          assert(arg_primitiveField != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.create was null, expected non-null String.');
          final int? arg_classFieldIdentifier = (args[2] as int?);
          assert(arg_classFieldIdentifier != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.create was null, expected non-null int.');
          api.create(arg_identifier!, arg_primitiveField!, arg_classFieldIdentifier!);
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyClassHostApi.myStaticMethod', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          api.myStaticMethod();
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyClassHostApi.myMethod', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.myMethod was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_identifier = (args[0] as int?);
          assert(arg_identifier != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.myMethod was null, expected non-null int.');
          final String? arg_primitiveParam = (args[1] as String?);
          assert(arg_primitiveParam != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.myMethod was null, expected non-null String.');
          final int? arg_classParamIdentifier = (args[2] as int?);
          assert(arg_classParamIdentifier != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.myMethod was null, expected non-null int.');
          api.myMethod(arg_identifier!, arg_primitiveParam!, arg_classParamIdentifier!);
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyClassHostApi.attachClassField', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.attachClassField was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_identifier = (args[0] as int?);
          assert(arg_identifier != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.attachClassField was null, expected non-null int.');
          final int? arg_classFieldIdentifier = (args[1] as int?);
          assert(arg_classFieldIdentifier != null, 'Argument for dev.flutter.pigeon.MyClassHostApi.attachClassField was null, expected non-null int.');
          api.attachClassField(arg_identifier!, arg_classFieldIdentifier!);
          return <Object?, Object?>{};
        });
      }
    }
  }
}

class _TestMyOtherClassHostApiCodec extends StandardMessageCodec {
  const _TestMyOtherClassHostApiCodec();
}
abstract class TestMyOtherClassHostApi {
  static const MessageCodec<Object?> codec = _TestMyOtherClassHostApiCodec();

  void create(int identifier);
  static void setup(TestMyOtherClassHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyOtherClassHostApi.create', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MyOtherClassHostApi.create was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_identifier = (args[0] as int?);
          assert(arg_identifier != null, 'Argument for dev.flutter.pigeon.MyOtherClassHostApi.create was null, expected non-null int.');
          api.create(arg_identifier!);
          return <Object?, Object?>{};
        });
      }
    }
  }
}

class _TestMyClassSubclassHostApiCodec extends StandardMessageCodec {
  const _TestMyClassSubclassHostApiCodec();
}
abstract class TestMyClassSubclassHostApi {
  static const MessageCodec<Object?> codec = _TestMyClassSubclassHostApiCodec();

  void create(int identifier, String primitiveField, int classFieldIdentifier);
  static void setup(TestMyClassSubclassHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyClassSubclassHostApi.create', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MyClassSubclassHostApi.create was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_identifier = (args[0] as int?);
          assert(arg_identifier != null, 'Argument for dev.flutter.pigeon.MyClassSubclassHostApi.create was null, expected non-null int.');
          final String? arg_primitiveField = (args[1] as String?);
          assert(arg_primitiveField != null, 'Argument for dev.flutter.pigeon.MyClassSubclassHostApi.create was null, expected non-null String.');
          final int? arg_classFieldIdentifier = (args[2] as int?);
          assert(arg_classFieldIdentifier != null, 'Argument for dev.flutter.pigeon.MyClassSubclassHostApi.create was null, expected non-null int.');
          api.create(arg_identifier!, arg_primitiveField!, arg_classFieldIdentifier!);
          return <Object?, Object?>{};
        });
      }
    }
  }
}

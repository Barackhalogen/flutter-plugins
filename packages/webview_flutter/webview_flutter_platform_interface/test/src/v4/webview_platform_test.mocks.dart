// Mocks generated by Mockito 5.0.16 from annotations
// in webview_flutter_platform_interface/test/src/v4/webview_platform_test.dart.
// Do not manually edit this file.

import 'dart:typed_data' as _i8;

import 'package:flutter/foundation.dart' as _i9;
import 'package:flutter/gestures.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:webview_flutter_platform_interface/src/v4/navigation_callback_handler_delegate.dart'
    as _i4;
import 'package:webview_flutter_platform_interface/src/v4/types/types.dart'
    as _i3;
import 'package:webview_flutter_platform_interface/src/v4/webview_controller_delegate.dart'
    as _i5;
import 'package:webview_flutter_platform_interface/src/v4/webview_cookie_manager_delegate.dart'
    as _i2;
import 'package:webview_flutter_platform_interface/src/v4/webview_platform.dart'
    as _i7;
import 'package:webview_flutter_platform_interface/src/v4/webview_widget_delegate.dart'
    as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWebViewCookieManagerDelegate_0 extends _i1.Fake
    implements _i2.WebViewCookieManagerDelegate {}

class _FakeLoadRequestParamsDelegate_1 extends _i1.Fake
    implements _i3.LoadRequestParamsDelegate {}

class _FakeNavigationCallbackHandlerDelegate_2 extends _i1.Fake
    implements _i4.NavigationCallbackHandlerDelegate {}

class _FakeWebResourceErrorDelegate_3 extends _i1.Fake
    implements _i3.WebResourceErrorDelegate {}

class _FakeWebSettingsDelegate_4 extends _i1.Fake
    implements _i3.WebSettingsDelegate {}

class _FakeWebViewControllerDelegate_5 extends _i1.Fake
    implements _i5.WebViewControllerDelegate {}

class _FakeWebViewWidgetDelegate_6 extends _i1.Fake
    implements _i6.WebViewWidgetDelegate {}

/// A class which mocks [WebViewPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebViewPlatform extends _i1.Mock implements _i7.WebViewPlatform {
  MockWebViewPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebViewCookieManagerDelegate createCookieManagerDelegate() =>
      (super.noSuchMethod(Invocation.method(#createCookieManagerDelegate, []),
              returnValue: _FakeWebViewCookieManagerDelegate_0())
          as _i2.WebViewCookieManagerDelegate);
  @override
  _i3.LoadRequestParamsDelegate createLoadRequestParamsDelegate(
          {Uri? uri,
          _i3.LoadRequestMethod? method,
          Map<String, String>? headers,
          _i8.Uint8List? body}) =>
      (super.noSuchMethod(
              Invocation.method(#createLoadRequestParamsDelegate, [],
                  {#uri: uri, #method: method, #headers: headers, #body: body}),
              returnValue: _FakeLoadRequestParamsDelegate_1())
          as _i3.LoadRequestParamsDelegate);
  @override
  _i4.NavigationCallbackHandlerDelegate
      createNavigationCallbackHandlerDelegate() => (super.noSuchMethod(
              Invocation.method(#createNavigationCallbackHandlerDelegate, []),
              returnValue: _FakeNavigationCallbackHandlerDelegate_2())
          as _i4.NavigationCallbackHandlerDelegate);
  @override
  _i3.WebResourceErrorDelegate createWebResourceErrorDelegate(
          {int? errorCode,
          String? description,
          _i3.WebResourceErrorType? errorType}) =>
      (super.noSuchMethod(
              Invocation.method(#createWebResourceErrorDelegate, [], {
                #errorCode: errorCode,
                #description: description,
                #errorType: errorType
              }),
              returnValue: _FakeWebResourceErrorDelegate_3())
          as _i3.WebResourceErrorDelegate);
  @override
  _i3.WebSettingsDelegate createWebSettingsDelegate(
          {bool? allowsInlineMediaPlayback,
          bool? debuggingEnabled,
          bool? gestureNavigationEnabled,
          bool? hasNavigationDelegate,
          bool? hasProgressTracking,
          _i3.JavaScriptMode? javaScriptMode,
          _i3.WebSetting<String>? userAgent,
          bool? zoomEnabled}) =>
      (super.noSuchMethod(
              Invocation.method(#createWebSettingsDelegate, [], {
                #allowsInlineMediaPlayback: allowsInlineMediaPlayback,
                #debuggingEnabled: debuggingEnabled,
                #gestureNavigationEnabled: gestureNavigationEnabled,
                #hasNavigationDelegate: hasNavigationDelegate,
                #hasProgressTracking: hasProgressTracking,
                #javaScriptMode: javaScriptMode,
                #userAgent: userAgent,
                #zoomEnabled: zoomEnabled
              }),
              returnValue: _FakeWebSettingsDelegate_4())
          as _i3.WebSettingsDelegate);
  @override
  _i5.WebViewControllerDelegate createWebViewControllerDelegate() => (super
          .noSuchMethod(Invocation.method(#createWebViewControllerDelegate, []),
              returnValue: _FakeWebViewControllerDelegate_5())
      as _i5.WebViewControllerDelegate);
  @override
  _i6.WebViewWidgetDelegate createWebViewWidgetDelegate(
          {_i9.Key? key,
          _i5.WebViewControllerDelegate? controller,
          Set<_i9.Factory<_i10.OneSequenceGestureRecognizer>>?
              gestureRecognizers}) =>
      (super.noSuchMethod(
              Invocation.method(#createWebViewWidgetDelegate, [], {
                #key: key,
                #controller: controller,
                #gestureRecognizers: gestureRecognizers
              }),
              returnValue: _FakeWebViewWidgetDelegate_6())
          as _i6.WebViewWidgetDelegate);
  @override
  String toString() => super.toString();
}

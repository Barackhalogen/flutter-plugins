// Mocks generated by Mockito 5.0.16 from annotations
// in webview_flutter_wkwebview/example/ios/.symlinks/plugins/webview_flutter_wkwebview/test/src/webview_cupertino_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:math' as _i3;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:webview_flutter_platform_interface/src/types/javascript_channel.dart'
    as _i9;
import 'package:webview_flutter_platform_interface/src/types/types.dart'
    as _i10;
import 'package:webview_flutter_platform_interface/webview_flutter_platform_interface.dart'
    as _i8;
import 'package:webview_flutter_wkwebview/src/foundation/foundation.dart'
    as _i7;
import 'package:webview_flutter_wkwebview/src/ios_kit/ios_kit.dart' as _i2;
import 'package:webview_flutter_wkwebview/src/web_kit/web_kit.dart' as _i4;
import 'package:webview_flutter_wkwebview/src/webview_cupertino_widget.dart'
    as _i11;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeScrollView_0 extends _i1.Fake implements _i2.ScrollView {}

class _FakePoint_1<T extends num> extends _i1.Fake implements _i3.Point<T> {}

class _FakeWebView_2 extends _i1.Fake implements _i4.WebView {}

/// A class which mocks [WebView].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebView extends _i1.Mock implements _i4.WebView {
  MockWebView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ScrollView> get scrollView =>
      (super.noSuchMethod(Invocation.getter(#scrollView),
              returnValue: Future<_i2.ScrollView>.value(_FakeScrollView_0()))
          as _i5.Future<_i2.ScrollView>);
  @override
  _i5.Future<bool> get canGoBack =>
      (super.noSuchMethod(Invocation.getter(#canGoBack),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> get canGoForward =>
      (super.noSuchMethod(Invocation.getter(#canGoForward),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<String?> get url => (super.noSuchMethod(Invocation.getter(#url),
      returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<String?> get title =>
      (super.noSuchMethod(Invocation.getter(#title),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<double> get estimatedProgress =>
      (super.noSuchMethod(Invocation.getter(#estimatedProgress),
          returnValue: Future<double>.value(0.0)) as _i5.Future<double>);
  @override
  set allowsBackForwardNavigationGestures(bool? allow) => super.noSuchMethod(
      Invocation.setter(#allowsBackForwardNavigationGestures, allow),
      returnValueForMissingStub: null);
  @override
  set customUserAgent(String? userAgent) =>
      super.noSuchMethod(Invocation.setter(#customUserAgent, userAgent),
          returnValueForMissingStub: null);
  @override
  set navigationDelegate(_i4.NavigationDelegate? delegate) =>
      super.noSuchMethod(Invocation.setter(#navigationDelegate, delegate),
          returnValueForMissingStub: null);
  @override
  set iosDelegate(_i4.IosDelegate? delegate) =>
      super.noSuchMethod(Invocation.setter(#iosDelegate, delegate),
          returnValueForMissingStub: null);
  @override
  set backgroundColor(_i6.Color? color) =>
      super.noSuchMethod(Invocation.setter(#backgroundColor, color),
          returnValueForMissingStub: null);
  @override
  set opaque(bool? opaque) =>
      super.noSuchMethod(Invocation.setter(#opaque, opaque),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> loadRequest(_i7.UrlRequest? request) =>
      (super.noSuchMethod(Invocation.method(#loadRequest, [request]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> loadHtmlString(String? string, String? baseUrl) =>
      (super.noSuchMethod(Invocation.method(#loadHtmlString, [string, baseUrl]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> loadFileUrl(String? url, String? readAccessUrl) =>
      (super.noSuchMethod(Invocation.method(#loadFileUrl, [url, readAccessUrl]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> goBack() =>
      (super.noSuchMethod(Invocation.method(#goBack, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> goForward() =>
      (super.noSuchMethod(Invocation.method(#goForward, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String?> evaluateJavaScript(String? javaScriptString) => (super
      .noSuchMethod(Invocation.method(#evaluateJavaScript, [javaScriptString]),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<void> addObserver(_i7.FoundationObject? observer, String? keyPath,
          Set<_i7.KeyValueObservingOptions>? options) =>
      (super.noSuchMethod(
          Invocation.method(#addObserver, [observer, keyPath, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeObserver(
          _i7.FoundationObject? observer, String? keyPath) =>
      (super.noSuchMethod(
          Invocation.method(#removeObserver, [observer, keyPath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void observeValue(String? keyPath, _i7.FoundationObject? object,
          Map<_i7.KeyValueChangeKey, Object?>? change) =>
      super.noSuchMethod(
          Invocation.method(#observeValue, [keyPath, object, change]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ScrollView].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollView extends _i1.Mock implements _i2.ScrollView {
  MockScrollView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Point<double>> get contentOffset => (super.noSuchMethod(
          Invocation.getter(#contentOffset),
          returnValue: Future<_i3.Point<double>>.value(_FakePoint_1<double>()))
      as _i5.Future<_i3.Point<double>>);
  @override
  set contentOffset(_i5.FutureOr<_i3.Point<double>>? offset) =>
      super.noSuchMethod(Invocation.setter(#contentOffset, offset),
          returnValueForMissingStub: null);
  @override
  set backgroundColor(_i6.Color? color) =>
      super.noSuchMethod(Invocation.setter(#backgroundColor, color),
          returnValueForMissingStub: null);
  @override
  set opaque(bool? opaque) =>
      super.noSuchMethod(Invocation.setter(#opaque, opaque),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> addObserver(_i7.FoundationObject? observer, String? keyPath,
          Set<_i7.KeyValueObservingOptions>? options) =>
      (super.noSuchMethod(
          Invocation.method(#addObserver, [observer, keyPath, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeObserver(
          _i7.FoundationObject? observer, String? keyPath) =>
      (super.noSuchMethod(
          Invocation.method(#removeObserver, [observer, keyPath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void observeValue(String? keyPath, _i7.FoundationObject? object,
          Map<_i7.KeyValueChangeKey, Object?>? change) =>
      super.noSuchMethod(
          Invocation.method(#observeValue, [keyPath, object, change]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Preferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferences extends _i1.Mock implements _i4.Preferences {
  MockPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set javaScriptEnabled(bool? javaScriptEnabled) => super.noSuchMethod(
      Invocation.setter(#javaScriptEnabled, javaScriptEnabled),
      returnValueForMissingStub: null);
  @override
  _i5.Future<void> addObserver(_i7.FoundationObject? observer, String? keyPath,
          Set<_i7.KeyValueObservingOptions>? options) =>
      (super.noSuchMethod(
          Invocation.method(#addObserver, [observer, keyPath, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeObserver(
          _i7.FoundationObject? observer, String? keyPath) =>
      (super.noSuchMethod(
          Invocation.method(#removeObserver, [observer, keyPath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void observeValue(String? keyPath, _i7.FoundationObject? object,
          Map<_i7.KeyValueChangeKey, Object?>? change) =>
      super.noSuchMethod(
          Invocation.method(#observeValue, [keyPath, object, change]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserContentController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserContentController extends _i1.Mock
    implements _i4.UserContentController {
  MockUserContentController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> addScriptMessageHandler(
          _i4.ScriptMessageHandler? handler, String? name) =>
      (super.noSuchMethod(
          Invocation.method(#addScriptMessageHandler, [handler, name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeScriptMessageHandler(String? name) => (super
      .noSuchMethod(Invocation.method(#removeScriptMessageHandler, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeAllScriptMessageHandlers() => (super.noSuchMethod(
      Invocation.method(#removeAllScriptMessageHandlers, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> addUserScript(_i4.UserScript? userScript) =>
      (super.noSuchMethod(Invocation.method(#addUserScript, [userScript]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeAllUserScripts() =>
      (super.noSuchMethod(Invocation.method(#removeAllUserScripts, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> addObserver(_i7.FoundationObject? observer, String? keyPath,
          Set<_i7.KeyValueObservingOptions>? options) =>
      (super.noSuchMethod(
          Invocation.method(#addObserver, [observer, keyPath, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeObserver(
          _i7.FoundationObject? observer, String? keyPath) =>
      (super.noSuchMethod(
          Invocation.method(#removeObserver, [observer, keyPath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void observeValue(String? keyPath, _i7.FoundationObject? object,
          Map<_i7.KeyValueChangeKey, Object?>? change) =>
      super.noSuchMethod(
          Invocation.method(#observeValue, [keyPath, object, change]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WebViewConfiguration].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebViewConfiguration extends _i1.Mock
    implements _i4.WebViewConfiguration {
  MockWebViewConfiguration() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set preferences(_i4.Preferences? preferences) =>
      super.noSuchMethod(Invocation.setter(#preferences, preferences),
          returnValueForMissingStub: null);
  @override
  set userContentController(_i4.UserContentController? userContentController) =>
      super.noSuchMethod(
          Invocation.setter(#userContentController, userContentController),
          returnValueForMissingStub: null);
  @override
  set allowsInlineMediaPlayback(bool? allow) =>
      super.noSuchMethod(Invocation.setter(#allowsInlineMediaPlayback, allow),
          returnValueForMissingStub: null);
  @override
  set mediaTypesRequiringUserActionForPlayback(
          Set<_i4.AudiovisualMediaType>? types) =>
      super.noSuchMethod(
          Invocation.setter(#mediaTypesRequiringUserActionForPlayback, types),
          returnValueForMissingStub: null);
  @override
  set requiresUserActionForMediaPlayback(bool? required) => super.noSuchMethod(
      Invocation.setter(#requiresUserActionForMediaPlayback, required),
      returnValueForMissingStub: null);
  @override
  set mediaPlaybackRequiresUserAction(bool? required) => super.noSuchMethod(
      Invocation.setter(#mediaPlaybackRequiresUserAction, required),
      returnValueForMissingStub: null);
  @override
  _i5.Future<void> addObserver(_i7.FoundationObject? observer, String? keyPath,
          Set<_i7.KeyValueObservingOptions>? options) =>
      (super.noSuchMethod(
          Invocation.method(#addObserver, [observer, keyPath, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeObserver(
          _i7.FoundationObject? observer, String? keyPath) =>
      (super.noSuchMethod(
          Invocation.method(#removeObserver, [observer, keyPath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void observeValue(String? keyPath, _i7.FoundationObject? object,
          Map<_i7.KeyValueChangeKey, Object?>? change) =>
      super.noSuchMethod(
          Invocation.method(#observeValue, [keyPath, object, change]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WebsiteDataStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebsiteDataStore extends _i1.Mock implements _i4.WebsiteDataStore {
  MockWebsiteDataStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> removeDataOfTypes(
          Set<_i4.WebsiteDataTypes>? dataTypes, DateTime? since) =>
      (super.noSuchMethod(
          Invocation.method(#removeDataOfTypes, [dataTypes, since]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> addObserver(_i7.FoundationObject? observer, String? keyPath,
          Set<_i7.KeyValueObservingOptions>? options) =>
      (super.noSuchMethod(
          Invocation.method(#addObserver, [observer, keyPath, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeObserver(
          _i7.FoundationObject? observer, String? keyPath) =>
      (super.noSuchMethod(
          Invocation.method(#removeObserver, [observer, keyPath]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void observeValue(String? keyPath, _i7.FoundationObject? object,
          Map<_i7.KeyValueChangeKey, Object?>? change) =>
      super.noSuchMethod(
          Invocation.method(#observeValue, [keyPath, object, change]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [JavascriptChannelRegistry].
///
/// See the documentation for Mockito's code generation for more information.
class MockJavascriptChannelRegistry extends _i1.Mock
    implements _i8.JavascriptChannelRegistry {
  MockJavascriptChannelRegistry() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i9.JavascriptChannel> get channels =>
      (super.noSuchMethod(Invocation.getter(#channels),
              returnValue: <String, _i9.JavascriptChannel>{})
          as Map<String, _i9.JavascriptChannel>);
  @override
  void onJavascriptChannelMessage(String? channel, String? message) =>
      super.noSuchMethod(
          Invocation.method(#onJavascriptChannelMessage, [channel, message]),
          returnValueForMissingStub: null);
  @override
  void updateJavascriptChannelsFromSet(Set<_i9.JavascriptChannel>? channels) =>
      super.noSuchMethod(
          Invocation.method(#updateJavascriptChannelsFromSet, [channels]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WebViewPlatformCallbacksHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebViewPlatformCallbacksHandler extends _i1.Mock
    implements _i8.WebViewPlatformCallbacksHandler {
  MockWebViewPlatformCallbacksHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FutureOr<bool> onNavigationRequest({String? url, bool? isForMainFrame}) =>
      (super.noSuchMethod(
          Invocation.method(#onNavigationRequest, [],
              {#url: url, #isForMainFrame: isForMainFrame}),
          returnValue: Future<bool>.value(false)) as _i5.FutureOr<bool>);
  @override
  void onPageStarted(String? url) =>
      super.noSuchMethod(Invocation.method(#onPageStarted, [url]),
          returnValueForMissingStub: null);
  @override
  void onPageFinished(String? url) =>
      super.noSuchMethod(Invocation.method(#onPageFinished, [url]),
          returnValueForMissingStub: null);
  @override
  void onProgress(int? progress) =>
      super.noSuchMethod(Invocation.method(#onProgress, [progress]),
          returnValueForMissingStub: null);
  @override
  void onWebResourceError(_i10.WebResourceError? error) =>
      super.noSuchMethod(Invocation.method(#onWebResourceError, [error]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WebViewProxy].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebViewProxy extends _i1.Mock implements _i11.WebViewProxy {
  MockWebViewProxy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.WebView createWebView(_i4.WebViewConfiguration? configuration) =>
      (super.noSuchMethod(Invocation.method(#createWebView, [configuration]),
          returnValue: _FakeWebView_2()) as _i4.WebView);
  @override
  String toString() => super.toString();
}

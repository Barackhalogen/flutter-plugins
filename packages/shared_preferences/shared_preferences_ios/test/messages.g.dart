// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v1.0.16), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;
import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import '../lib/messages.g.dart';

class _TestSharedPreferencesApiCodec extends StandardMessageCodec {
  const _TestSharedPreferencesApiCodec();
}

abstract class TestSharedPreferencesApi {
  static const MessageCodec<Object?> codec = _TestSharedPreferencesApiCodec();

  bool remove(String key);
  bool setBool(String key, bool value);
  bool setDouble(String key, double value);
  bool setInt(String key, int value);
  bool setString(String key, String value);
  bool setStringList(String key, List<String?> value);
  bool clear();
  Map<String?, Object?> getAll();
  static void setup(TestSharedPreferencesApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.remove', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.remove was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_key = (args[0] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.remove was null, expected non-null String.');
          final bool output = api.remove(arg_key!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.setBool', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setBool was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_key = (args[0] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setBool was null, expected non-null String.');
          final bool? arg_value = (args[1] as bool?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setBool was null, expected non-null bool.');
          final bool output = api.setBool(arg_key!, arg_value!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.setDouble', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setDouble was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_key = (args[0] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setDouble was null, expected non-null String.');
          final double? arg_value = (args[1] as double?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setDouble was null, expected non-null double.');
          final bool output = api.setDouble(arg_key!, arg_value!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.setInt', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setInt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_key = (args[0] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setInt was null, expected non-null String.');
          final int? arg_value = (args[1] as int?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setInt was null, expected non-null int.');
          final bool output = api.setInt(arg_key!, arg_value!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.setString', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setString was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_key = (args[0] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setString was null, expected non-null String.');
          final String? arg_value = (args[1] as String?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setString was null, expected non-null String.');
          final bool output = api.setString(arg_key!, arg_value!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.setStringList', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setStringList was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_key = (args[0] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setStringList was null, expected non-null String.');
          final List<String?>? arg_value =
              (args[1] as List<Object?>?)?.cast<String?>();
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.SharedPreferencesApi.setStringList was null, expected non-null List<String?>.');
          final bool output = api.setStringList(arg_key!, arg_value!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.clear', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final bool output = api.clear();
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SharedPreferencesApi.getAll', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final Map<String?, Object?> output = api.getAll();
          return <Object?, Object?>{'result': output};
        });
      }
    }
  }
}

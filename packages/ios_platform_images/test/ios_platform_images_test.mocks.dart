// Mocks generated by Mockito 5.3.2 from annotations
// in ios_platform_images/example/ios/.symlinks/plugins/ios_platform_images/test/ios_platform_images_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:ios_platform_images/platform_images_api.g.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlatformImage_0 extends _i1.SmartFake implements _i2.PlatformImage {
  _FakePlatformImage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlatformImagesApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformImagesApi extends _i1.Mock implements _i2.PlatformImagesApi {
  @override
  _i3.Future<_i2.PlatformImage> getSystemImage(
    String? arg_name,
    double? arg_size,
    _i2.FontWeight? arg_weight,
    List<double?>? arg_colorsRGBA,
    bool? arg_preferMulticolor,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSystemImage,
          [
            arg_name,
            arg_size,
            arg_weight,
            arg_colorsRGBA,
            arg_preferMulticolor,
          ],
        ),
        returnValue: _i3.Future<_i2.PlatformImage>.value(_FakePlatformImage_0(
          this,
          Invocation.method(
            #getSystemImage,
            [
              arg_name,
              arg_size,
              arg_weight,
              arg_colorsRGBA,
              arg_preferMulticolor,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PlatformImage>.value(_FakePlatformImage_0(
          this,
          Invocation.method(
            #getSystemImage,
            [
              arg_name,
              arg_size,
              arg_weight,
              arg_colorsRGBA,
              arg_preferMulticolor,
            ],
          ),
        )),
      ) as _i3.Future<_i2.PlatformImage>);
  @override
  _i3.Future<_i2.PlatformImage> getPlatformImage(String? arg_name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlatformImage,
          [arg_name],
        ),
        returnValue: _i3.Future<_i2.PlatformImage>.value(_FakePlatformImage_0(
          this,
          Invocation.method(
            #getPlatformImage,
            [arg_name],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.PlatformImage>.value(_FakePlatformImage_0(
          this,
          Invocation.method(
            #getPlatformImage,
            [arg_name],
          ),
        )),
      ) as _i3.Future<_i2.PlatformImage>);
  @override
  _i3.Future<String?> resolveURL(
    String? arg_name,
    String? arg_extension,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveURL,
          [
            arg_name,
            arg_extension,
          ],
        ),
        returnValue: _i3.Future<String?>.value(),
        returnValueForMissingStub: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
}

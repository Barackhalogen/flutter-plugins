// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v4.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "PlatformImagesApi.g.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
      @"code" : (error.code ?: [NSNull null]),
      @"message" : (error.message ?: [NSNull null]),
      @"details" : (error.details ?: [NSNull null]),
    };
  }
  return @{
    @"result" : (result ?: [NSNull null]),
    @"error" : errorDict,
  };
}
static id GetNullableObject(NSDictionary *dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTPlatformImage ()
+ (FLTPlatformImage *)fromMap:(NSDictionary *)dict;
+ (nullable FLTPlatformImage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTPlatformImage
+ (instancetype)makeWithScale:(nullable NSNumber *)scale
                        bytes:(nullable FlutterStandardTypedData *)bytes {
  FLTPlatformImage *pigeonResult = [[FLTPlatformImage alloc] init];
  pigeonResult.scale = scale;
  pigeonResult.bytes = bytes;
  return pigeonResult;
}
+ (FLTPlatformImage *)fromMap:(NSDictionary *)dict {
  FLTPlatformImage *pigeonResult = [[FLTPlatformImage alloc] init];
  pigeonResult.scale = GetNullableObject(dict, @"scale");
  pigeonResult.bytes = GetNullableObject(dict, @"bytes");
  return pigeonResult;
}
+ (nullable FLTPlatformImage *)nullableFromMap:(NSDictionary *)dict {
  return (dict) ? [FLTPlatformImage fromMap:dict] : nil;
}
- (NSDictionary *)toMap {
  return @{
    @"scale" : (self.scale ?: [NSNull null]),
    @"bytes" : (self.bytes ?: [NSNull null]),
  };
}
@end

@interface FLTPlatformImagesApiCodecReader : FlutterStandardReader
@end
@implementation FLTPlatformImagesApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [FLTPlatformImage fromMap:[self readValue]];

    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTPlatformImagesApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTPlatformImagesApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTPlatformImage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTPlatformImagesApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTPlatformImagesApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTPlatformImagesApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTPlatformImagesApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTPlatformImagesApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FLTPlatformImagesApiCodecReaderWriter *readerWriter =
        [[FLTPlatformImagesApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTPlatformImagesApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                               NSObject<FLTPlatformImagesApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.PlatformImagesApi.getSystemImage"
        binaryMessenger:binaryMessenger
                  codec:FLTPlatformImagesApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (getSystemImageName:size:weight:colorsRGBA:preferMulticolor:error:)],
                @"FLTPlatformImagesApi api (%@) doesn't respond to "
                @"@selector(getSystemImageName:size:weight:colorsRGBA:preferMulticolor:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_size = GetNullableObjectAtIndex(args, 1);
        FLTFontWeight arg_weight = [GetNullableObjectAtIndex(args, 2) integerValue];
        NSArray<NSNumber *> *arg_colorsRGBA = GetNullableObjectAtIndex(args, 3);
        NSNumber *arg_preferMulticolor = GetNullableObjectAtIndex(args, 4);
        FlutterError *error;
        FLTPlatformImage *output = [api getSystemImageName:arg_name
                                                      size:arg_size
                                                    weight:arg_weight
                                                colorsRGBA:arg_colorsRGBA
                                          preferMulticolor:arg_preferMulticolor
                                                     error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.PlatformImagesApi.getPlatformImage"
        binaryMessenger:binaryMessenger
                  codec:FLTPlatformImagesApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlatformImageName:error:)],
                @"FLTPlatformImagesApi api (%@) doesn't respond to "
                @"@selector(getPlatformImageName:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTPlatformImage *output = [api getPlatformImageName:arg_name error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.PlatformImagesApi.resolveURL"
        binaryMessenger:binaryMessenger
                  codec:FLTPlatformImagesApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resolveURLName:extension:error:)],
                @"FLTPlatformImagesApi api (%@) doesn't respond to "
                @"@selector(resolveURLName:extension:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        NSString *arg_extension = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSString *output = [api resolveURLName:arg_name extension:arg_extension error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
